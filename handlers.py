import os
import subprocess
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import *
from data import data, save_to_data
from io import BytesIO
from PIL import Image, ImageOps
import pillow_heif
from pathlib import Path
import sys
import winshell
import time
import pyautogui
from image_counter.image_counter import counter_outer
from lexicon import is_admin
import asyncio
from cropper.cropper_main import sendy_cropper
from photo_processing import PhotoProc
import re
from threading import Thread
import pystray
from datetime import datetime
from config.config import datatime_on_start, dp, bot, bot_loop, chat_id
from watchfiles import awatch

router = Router()


class SettingsStates(StatesGroup):
    path = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏
    Alex_path = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –ê–ª–µ–∫—Å
    Alex_exceptions = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ê–ª–µ–∫—Å
    photo_processing_path = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ
    photo_processing_zav = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ
    photo_processing_white = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±–µ–ª–æ–π —Ä–∞–º–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ
    photo_processing_dpi = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∏–ø–∏–∞–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ
    photo_processing_black = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —á—ë—Ä–Ω–æ–π —Ä–∞–º–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ
    photo_processing_fontsize = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ
    photo_processing_crop = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ


# /–∫–æ–º–∞–Ω–¥—ã
@router.message(Command(commands=["start"]))  # –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
async def process_start_command(message: Message):
    await message.answer(
        f'<b>{message.from_user.username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è. <i>Sendy {sendy_info[0]}</i> –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å.</b>'
        f'\n'
        f'\nüìå –í Sandy Cropper –¥–æ–±–∞–≤–ª–µ–Ω tab order. –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è —Å–∏–Ω–∏–º.\n'
        f'\nüìå –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–≥–æ.\n'
        f'\nüìå –ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –ø–æ–ª–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ updater, —É–ª—É—á—à–µ–Ω –≤–∏–∑—É–∞–ª.\n'
        f'\nüìå % = ‚úÇÔ∏è = /cropper; –∫–æ–º–∞–Ω–¥–∞ /cropper –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é.\n',
        reply_markup=main_keyboard
    )


@router.message(Command(commands=["info", "help"]))
async def process_help_command(message: Message):
    await message.answer(f'''Sendy {sendy_info[0]}\nandrey-david {sendy_info[1]}
          (V\\__/V)
          (=·µî·¥•·µî=)
          (") ‚Äø (")
@Andrey_David''')


@router.message(Command(commands=["stop"]))  # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
async def stop_command(message: Message):
    if await is_admin(message.from_user.id, message):
        await message.answer(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É —É–º–µ—Ä—â–≤–ª–µ–Ω–∏—è –°–µ–Ω–¥–∏?',
                             reply_markup=keyboard_inline_shutdown)


async def stop_sendy():
    sendy_tray.stop()
    await dp.stop_polling()
    await bot.session.close()


@router.callback_query(F.data == 'button_shutdown')  # –∫–Ω–æ–ø–∫–∞ /stop –Ω–∞–∂–∞—Ç–∞
async def process_button_shutdown_press(callback: CallbackQuery):
    time = datetime.now() - datatime_on_start
    time = str(time).split('.')[0]
    await callback.message.edit_text(text='ü™¶ –°–µ–Ω–¥–∏\n'
                                          '\n'
                                          f'üò≠ –û–Ω –ø—Ä–æ–∂–∏–ª –≤—Å–µ–≥–æ {time}')
    await stop_sendy()


def stop_sendy_from_tray():
    asyncio.run_coroutine_threadsafe(stop_sendy(), bot_loop)

icon_path = Path(__file__).parent / "sendy.ico"
sendy_tray = pystray.Icon('Sendy', Image.open(icon_path),
                          menu=pystray.Menu(pystray.MenuItem('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', stop_sendy_from_tray)))


async def image_load_handler():
    file_path = '`–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω`'
    try:
        for file in os.listdir(data['path']):
            if file != 'Uploaded' and (file.endswith('.jpg') or file.endswith('.png') or file.endswith('.heic')):
                file_path = data['path'] + '\\' + file
                await bot.send_document(chat_id=chat_id, document=FSInputFile(file_path))
                if 'Uploaded' in os.listdir(data['path']):
                    os.replace(file_path, data['path'] + '\\Uploaded\\' + file)
                else:
                    os.mkdir(data['path'] + '\\Uploaded\\')
                    os.replace(file_path, data['path'] + '\\Uploaded\\' + file)
    except:
        try:
            await bot.send_message(chat_id=chat_id, text=f'üíÄ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.</b>'
                                                         f'\n'
                                                         f'\n–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:'
                                                         f'\n<code>{file_path}</code>'
                                                         f'\n'
                                                         f'\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–∞ –æ—Ç—Å—É—Ç–≤–∏–µ –≤ –Ω–µ–π –ø–æ—Å—Ç–æ—Ä–æ–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–∞–ø–æ–∫.'
                                                         f'\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ/—Å–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å /settings',
                                          reply_markup=keyboard_inline_open_folder)
            await asyncio.sleep(60)
        except:
            await bot.send_message(chat_id=chat_id, text=f'üíÄ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.</b>'
                                                                f'\n'
                                                                f'\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ/—Å–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å /settings',
                                          )
            await asyncio.sleep(60)


# –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
async def image_loader():
    await asyncio.sleep(5)
    try:
        async for _ in awatch(data['path']):
            await image_load_handler()
    except Exception as e:
        print(f"[image_loader] –û—à–∏–±–∫–∞: {e}")  # –°–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await bot.send_message(chat_id=chat_id, text=f"üíÄ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:</b> {e} "
                                                                   f"\n\n –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å /settings")


@router.message(F.text.lower() == 'üßÆ')
async def Alex_plus_button_pressed(message: Message):
    if await is_admin(message.from_user.id, message):
        try:
            await counter_outer(data['Alex_path'], message)
        except Exception as e:
            await message.answer(text=f'üíÄ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}</b>'
                                      f'\n'
                                      f'\n–ü—É—Ç—å –ê–ª–µ–∫—Å+:'
                                      f'\n<code>{data['Alex_path']}</code>'
                                      f'\n'
                                      f'\n‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –ê–ª–µ–∫—Å+ –≤ /settings')


@router.message(F.text.lower() == 'üì∏')
async def button_pressed(message: Message):
    save_folder = "screenshots"
    os.makedirs(save_folder, exist_ok=True)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    timestamp = time.strftime("%H-%M-%S__%d.%m.%Y")
    filename = os.path.join(save_folder, f"screenshot_{timestamp}.png")
    try:
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        screenshot = pyautogui.screenshot()
        screenshot.save(filename)
        if await is_admin(message.from_user.id, message):
            await message.answer_document(document=FSInputFile(filename),
                                          caption=f"‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\nüè∑ <code>{filename}</code>",
                                          )
    except Exception as e:
        await message.bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")


# –ù–ê–°–¢–†–û–ô–ö–ò
@router.message(Command("settings"))  # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def settings_command(message: Message):
    if await is_admin(message.from_user.id, message):
        await message.answer(text=get_settings_main_text(data), reply_markup=keyboard_inline_settings_main
                             )


@router.message(F.text == "‚öôÔ∏è")  # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def settings_command(message: Message):
    if await is_admin(message.from_user.id, message):
        await message.answer(text=get_settings_main_text(data), reply_markup=keyboard_inline_settings_main
                             )


# –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê–ì–†–£–ó–ö–ê
@router.callback_query(F.data == 'settings_photo_loader')
async def settings_photo_loader(callback: CallbackQuery):
    await callback.message.edit_text(text=get_settings_photo_loader_text(data),
                                     reply_markup=keyboard_inline_settings_photo_loader
                                     )
    await callback.answer()


@router.callback_query(F.data == 'button_clean_folder_uploaded')
async def button_clean_folder_uploaded_pressed(callback: CallbackQuery):
    await callback.message.edit_text(text='üî• <b>–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É Uploaded?</b>',
                                     reply_markup=keyboard_inline_clean_folder
                                     )
    await callback.answer()


@router.callback_query(F.data == 'button_back_to_settings_photo_loader')
async def settings_photo_loader(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text=get_settings_photo_loader_text(data),
                                     reply_markup=keyboard_inline_settings_photo_loader
                                     )
    await state.clear()
    await callback.answer()


# –ù–ê–°–¢–†–û–ô–ö–ò –ó–ê–ì–†–£–ó–ö–ê –ø—É—Ç—å
@router.callback_query(F.data == 'button_settings_path')
async def button_settings_path(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ:',
                                     reply_markup=keyboard_inline_back_to_settings_photo_loader
                                     )
    await state.set_state(SettingsStates.path)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.path)
async def receive_alex_path(message: Message, state: FSMContext):
    data['path'] = message.text
    await save_to_data(key='path', value=message.text, message=message)
    await message.answer(f'‚úÖ <b>–ü—É—Ç—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>\n\nüìÅ <code>{data["path"]}</code>',
                         reply_markup=keyboard_inline_back_to_settings_photo_loader
                         )
    _ = asyncio.create_task(image_loader())
    await state.clear()


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê
@router.callback_query(F.data == 'settings_photo_processing')  # –∫–Ω–æ–ø–∫–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ
async def button_photo_processing_settings(callback: CallbackQuery):
    await callback.message.edit_text(text=get_settings_photo_processing_text(data),
                                     reply_markup=keyboard_inline_settings_photo_processing
                                     )


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê –ø—É—Ç—å
@router.callback_query(F.data == 'photo_processing_settings_path')
async def photo_processing_settings_path(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∫—É–¥–∞ –±—É–¥—É—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:',
                                     reply_markup=keyboard_inline_back_to_settings_photo_processing)
    await state.set_state(SettingsStates.photo_processing_path)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.photo_processing_path)
async def receive_photo_processing_settings_path(message: Message, state: FSMContext):
    data['photo_processing_path'] = message.text
    await save_to_data(key='photo_processing_path', value=message.text, message=message)
    await state.clear()
    await message.answer(f'‚úÖ <b>–ü—É—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>\n\nüìÅ <code>{data["photo_processing_path"]}</code>',
                         reply_markup=keyboard_inline_back_to_settings_photo_processing
                         )


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê –∑–∞–≤–æ—Ä–æ—Ç
@router.callback_query(F.data == 'photo_processing_settings_zav')
async def photo_processing_settings_zav(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∑–∞–≤–æ—Ä–æ—Ç –¥–ª—è —Ñ–æ—Ç–æ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:',
                                     reply_markup=keyboard_inline_back_to_settings_photo_processing)
    await state.set_state(SettingsStates.photo_processing_zav)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.photo_processing_zav)
async def receive_photo_processing_settings_zav(message: Message, state: FSMContext):
    try:
        data['photo_processing_zav'] = float(message.text)
        await save_to_data(key='photo_processing_zav', value=message.text, message=message)
        await state.clear()
        await message.answer(
            text=f'‚úÖ <b>–ó–∞–≤–æ—Ä–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>\n\nüìÉ <code>{data['photo_processing_zav']} —Å–º</code>',
            reply_markup=keyboard_inline_back_to_settings_photo_processing)
    except:
        await message.answer(f'üíÄ <b>–ß—Ç–æ-—Ç–æ —Ö—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ, –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>')


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê –±–µ–ª–∞—è —Ä–∞–º–∫–∞
@router.callback_query(F.data == 'photo_processing_settings_white')
async def photo_processing_settings_white(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –±–µ–ª–æ–π —Ä–∞–º–∫–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:',
                                     reply_markup=keyboard_inline_back_to_settings_photo_processing)
    await state.set_state(SettingsStates.photo_processing_white)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.photo_processing_white)
async def receive_photo_processing_settings_white(message: Message, state: FSMContext):
    try:
        data['photo_processing_white'] = float(message.text)
        await save_to_data(key='photo_processing_white', value=message.text, message=message)
        await state.clear()
        await message.answer(
            f'‚úÖ <b>–†–∞–∑–º–µ—Ä—ã –±–µ–ª–æ–π —Ä–∞–º–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω—ã</b>\n\nüî≥ <code>{data['photo_processing_white']} —Å–º</code>',
            reply_markup=keyboard_inline_back_to_settings_photo_processing)
    except:
        await message.answer(f'üíÄ <b>–ß—Ç–æ-—Ç–æ —Ö—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ, –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>')


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê –¥–∏–ø–∏–∞–π
@router.callback_query(F.data == 'photo_processing_settings_dpi')
async def photo_processing_settings_dpi(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ DPI:',
                                     reply_markup=keyboard_inline_back_to_settings_photo_processing)
    await state.set_state(SettingsStates.photo_processing_dpi)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.photo_processing_dpi)
async def receive_photo_processing_settings_dpi(message: Message, state: FSMContext):
    try:
        data['photo_processing_dpi'] = int(message.text)
        await save_to_data(key='photo_processing_dpi', value=message.text, message=message)
        await state.clear()
        await message.answer(f'‚úÖ <b>DPI –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>\n\n‚óºÔ∏è <code>{data['photo_processing_dpi']}</code>',
                             reply_markup=keyboard_inline_back_to_settings_photo_processing)
    except:
        await message.answer(f'üíÄ <b>–ß—Ç–æ-—Ç–æ —Ö—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ, –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>')


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê —á—ë—Ä–Ω–∞—è —Ä–∞–º–∫–∞
@router.callback_query(F.data == 'photo_processing_settings_black')
async def photo_processing_settings_black(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —á—ë—Ä–Ω–æ–π —Ä–∞–º–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö:',
                                     reply_markup=keyboard_inline_back_to_settings_photo_processing)
    await state.set_state(SettingsStates.photo_processing_black)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.photo_processing_black)
async def receive_photo_processing_settings_black(message: Message, state: FSMContext):
    try:
        data['photo_processing_black'] = int(message.text)
        await save_to_data(key='photo_processing_black', value=message.text, message=message)
        await state.clear()
        await message.answer(
            f'‚úÖ <b>–†–∞–∑–º–µ—Ä—ã —á—ë—Ä–Ω–æ–π —Ä–∞–º–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω—ã</b>\n\nüî≤ <code>{data['photo_processing_black']} px</code>',
            reply_markup=keyboard_inline_back_to_settings_photo_processing)
    except:
        await message.answer(f'üíÄ <b>–ß—Ç–æ-—Ç–æ —Ö—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ, –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>')


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê —à—Ä–∏—Ñ—Ç
@router.callback_query(F.data == 'photo_processing_settings_fontsize')
async def photo_processing_settings_fontsize(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö:',
                                     reply_markup=keyboard_inline_back_to_settings_photo_processing)
    await state.set_state(SettingsStates.photo_processing_fontsize)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.photo_processing_fontsize)
async def receive_photo_processing_settings_fontsize(message: Message, state: FSMContext):
    try:
        data['photo_processing_fontsize'] = int(message.text)
        await save_to_data(key='photo_processing_fontsize', value=message.text, message=message)
        await state.clear()
        await message.answer(
            f'‚úÖ <b>–†–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω—ã</b>\n\nüî† <code>{data['photo_processing_fontsize']} px</code>',
            reply_markup=keyboard_inline_back_to_settings_photo_processing)
    except:
        await message.answer(f'üíÄ <b>–ß—Ç–æ-—Ç–æ —Ö—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ, –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>')


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê –æ–±—Ä–µ–∑–∞–Ω–∏–µ
@router.callback_query(F.data == 'photo_processing_settings_crop')
async def photo_processing_settings_crop(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–µ–π –ø–æ–¥—Ä–µ–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:',
                                     reply_markup=keyboard_inline_back_to_settings_photo_processing)
    await state.set_state(SettingsStates.photo_processing_crop)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.photo_processing_crop)
async def receive_photo_processing_settings_crop(message: Message, state: FSMContext):
    try:
        data['photo_processing_crop'] = int(message.text)
        await save_to_data(key='photo_processing_crop', value=message.text, message=message)
        await state.clear()
        await message.answer(
            f'‚úÖ <b>–û–±—Ä–µ–∑–∫–∞ –∫—Ä–∞—è —Ñ–æ—Ç–æ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–∞</b>\n\n‚úÇÔ∏è <code>{data['photo_processing_crop']} px</code>',
            reply_markup=keyboard_inline_back_to_settings_photo_processing)
    except:
        await message.answer(f'üíÄ <b>–ß—Ç–æ-—Ç–æ —Ö—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ, –≤–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>')


# –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ê –Ω–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
@router.callback_query(F.data == 'button_back_to_settings_main')
async def button_back_to_settings(callback: CallbackQuery):
    await callback.message.edit_text(text=get_settings_main_text(data),
                                     reply_markup=keyboard_inline_settings_main)


@router.callback_query(F.data == 'button_back_to_settings_photo_processing')
async def button_back_to_settings_photo_processing(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text=get_settings_photo_processing_text(data),
                                     reply_markup=keyboard_inline_settings_photo_processing)


# –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–°–ß–Å–¢
@router.callback_query(F.data == 'settings_print_counter')
async def settings_print_counter(callback: CallbackQuery):
    await callback.message.edit_text(text=get_settings_print_counter_text(data),
                                     reply_markup=keyboard_inline_settings_print_counter)


@router.callback_query(F.data == 'button_back_to_settings_print_counter')
async def button_back_to_settings_print_counter(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text=get_settings_print_counter_text(data),
                                     reply_markup=keyboard_inline_settings_print_counter)
    await state.clear()


# –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–°–ß–Å–¢ –ø—É—Ç—å
@router.callback_query(F.data == 'button_Alex_path')
async def button_Alex_path(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ñ–∞–π–ª–æ–≤:',
                                     reply_markup=keyboard_inline_back_to_settings_print_counter)
    await state.set_state(SettingsStates.Alex_path)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.Alex_path)
async def receive_alex_path(message: Message, state: FSMContext):
    data['Alex_path'] = message.text
    await save_to_data(key='Alex_path', value=message.text, message=message)
    await message.answer(f'‚úÖ <b>–ü—É—Ç—å –∫ Alex+ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b>\n\nüìÅ <code>{data["Alex_path"]}</code>')
    await state.clear()


# –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–°–ß–Å–¢ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
@router.callback_query(F.data == 'button_Alex_exceptions')  # –∫–Ω–æ–ø–∫–∞ /settings –ê–ª–µ–∫—Å+ –ø—É—Ç—å –Ω–∞–∂–∞—Ç–∞
async def process_button_settings_Alex_exceptions_press(callback: CallbackQuery, state: FSMContext):
    exceptions = ', '.join(data['Alex_exceptions'])
    await callback.message.edit_text(text=f'–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: <code>{exceptions}</code>'
                                          f'\n'
                                          f'\n–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Alex+ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª "-" –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º (–Ω–∞–ø—Ä. -–ê–ª–µ–∫—Å), —Ä–µ–≥–∏—Å—Ç—Ä –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ:',
                                     reply_markup=keyboard_inline_settings_cancel)
    await state.set_state(SettingsStates.Alex_exceptions)
    await state.update_data(msg_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.Alex_exceptions)
async def receive_alex_path(message: Message, state: FSMContext):
    user_text = message.text.strip()
    exceptions = data['Alex_exceptions']

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_text.endswith(','):
        user_text = user_text[:-1]

    words = [w.strip() for w in user_text.split(',')]
    words = [w for w in words if w]  # —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ

    for word in words:
        if word.startswith('-'):
            try:
                exceptions.remove(word[1:])  # —É–¥–∞–ª—è–µ–º "-"
            except TypeError:
                await message.answer(f'üíÄ –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: <code>{word[1:]}</code>')
        else:
            exceptions.append(word)  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ

    data['Alex_exceptions'] = exceptions
    await save_to_data(key='Alex_exceptions', value=exceptions, message=message)
    exceptions = ', '.join(data['Alex_exceptions'])
    await message.answer(f'‚úÖ <b>–ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Alex+ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\nüñã <code>{exceptions}</code>')
    await state.clear()


@router.callback_query(F.data == 'update')
async def button_processed_update(callback: CallbackQuery):
    await callback.answer('Sendy –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω')
    subprocess.Popen("updater.exe")
    sendy_tray.stop()
    await config.dp.stop_polling()
    loop = asyncio.get_running_loop()
    loop.stop()


# –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ß–ï–ï
@router.callback_query(F.data == 'settings_other')
async def process_settings_photo_loader(callback: CallbackQuery):
    await callback.message.edit_text(text=get_settings_other_text(data), reply_markup=keyboard_inline_settings_other)
    await callback.answer()


@router.callback_query(F.data == 'button_back_to_settings_other')
async def button_back_to_settings_other(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text=get_settings_other_text(data), reply_markup=keyboard_inline_settings_other)
    await state.clear()
    await callback.answer()


# –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ß–ï–ï –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
@router.callback_query(F.data == 'button_startup')  # –∫–Ω–æ–ø–∫–∞ /settings –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∂–∞—Ç–∞
async def process_button_settings_startup_press(callback: CallbackQuery):
    await callback.message.edit_text(text='–î–æ–±–∞–≤–∏—Ç—å –°–µ–Ω–¥–∏ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É?',
                                     reply_markup=keyboard_inline_settings_other_startup)


@router.callback_query(F.data == 'button_startup_open_folder')  # –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–∞—Ç–∞
async def process_button_no_press(callback: CallbackQuery):
    os.system('explorer shell:startup')


@router.callback_query(F.data == 'button_open_folder')  # –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –Ω–∞–∂–∞—Ç–∞
async def button_open_folder(callback: CallbackQuery):
    os.system(f"explorer.exe {data['path']}")
    await callback.answer()


@router.callback_query(F.data == 'button_yes_clean_folder')  # –∫–Ω–æ–ø–∫–∞ –î–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ uploaded –Ω–∞–∂–∞—Ç–∞
async def button_yes_clean_folder(callback: CallbackQuery):
    files_size = 0
    for file in os.listdir(data['path'] + '/Uploaded/'):
        files_size += os.path.getsize(data['path'] + '/Uploaded/' + file)
        os.remove(data['path'] + '/Uploaded/' + file)
    files_size_mb = files_size / (1024 * 1024)
    await callback.message.edit_text(text=f'‚úÖ –ü–∞–ø–∫–∞ Uploaded –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ [{files_size_mb:.2f} –ú–ë]',
                                     reply_markup=keyboard_inline_open_folder)


@router.callback_query(F.data == 'button_no')
async def button_no(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(text='‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@router.callback_query(F.data == 'button_processed_photos_open_folder_pressed')  # –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ –Ω–∞–∂–∞—Ç–∞
async def button_processed_photos_open_folder_press(callback: CallbackQuery):
    os.system(f"explorer.exe {data['photo_processing']}")


@router.callback_query(F.data == 'button_startup_yes')  # –∫–Ω–æ–ø–∫–∞ /settings –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∂–∞—Ç–∞
async def process_button_settings_startup_press(callback: CallbackQuery):
    try:
        if getattr(sys, 'frozen', False):
            current_folder_path = Path(sys.executable).parent.resolve()
        else:
            current_folder_path = Path(__file__).parent.resolve()
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫
        file_path = str(current_folder_path / f"Sendy.exe")
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
        startup_folder = winshell.folder("Startup")
        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —è—Ä–ª—ã–∫—É
        shortcut_path = os.path.join(startup_folder, f"Sendy.lnk")
        # –°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞
        with winshell.shortcut(shortcut_path) as shortcut:
            shortcut.path = file_path
            shortcut.description = "Shortcut for Sendy"
            shortcut.working_directory = os.path.dirname(file_path)

        await callback.message.edit_text(text='‚úÖ –°–µ–Ω–¥–∏ —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Å—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π',
                                         reply_markup=keyboard_inline_startup_open_folder)
    except:
        await callback.message.edit_text(text='üíÄ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –°–µ–Ω–¥–∏ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É.</b>'
                                              '\n'
                                              '\n–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤—Ä—É—á–Ω—É—é:'
                                              '\n‚Ä¢ [WIN]+[R]'
                                              '\n‚Ä¢ shell:startup'
                                              '\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫ —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –°–µ–Ω–¥–∏ –≤ –ø–∞–ø–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏',
                                         reply_markup=keyboard_inline_startup_open_folder
                                         )


@router.callback_query(F.data.startswith('open_photo:'))
async def process_button_open_photo(callback: CallbackQuery):
    file_id = callback.data.split(':', 1)[1]
    filepath = photo_paths.get(file_id)
    try:
        os.startfile(filepath)
        await callback.answer("–û–¢–ö–†–´–í–ê–Æ", show_alert=False)
    except:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=False)
    await callback.answer()


@router.callback_query(F.data.startswith('open_photo_folder:'))
async def process_button_open_photo(callback: CallbackQuery):
    file_id = callback.data.split(':', 1)[1]
    filepath = photo_paths.get(file_id)
    try:
        subprocess.Popen(f'explorer /select,"{filepath}"')
        await callback.answer("–û–¢–ö–†–´–í–ê–Æ –ü–ê–ü–ö–£", show_alert=False)
    except:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=False)
    await callback.answer()


@router.callback_query(F.data.startswith('del_photo:'))
async def process_button_open_photo(callback: CallbackQuery):
    file_id = callback.data.split(':', 1)[1]
    filepath = photo_paths.get(file_id)
    try:
        os.remove(filepath)
        await callback.answer("–£–î–ê–õ–ï–ù–û", show_alert=False)
        await callback.message.edit_text(f"<b>üî• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–æ</b>\n\nüè∑ <s>{filepath.split('\\')[-1]}</s>")
    except:
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=False)
    await callback.answer()

@router.message(Command(commands=["cropper"]))
@router.message(F.text.lower().in_(['‚úÇÔ∏è', '%']))
async def button_pressed(message: Message):
    Thread(target=sendy_cropper, kwargs={
        'message': message,
    }).start()


@router.message(F.photo | (F.document & F.document.mime_type.startswith("image/")))
async def send(message: Message, bot):
    caption = ''
    file_size = message.document.file_size if message.document else message.photo[-1].file_size

    if file_size > 20 * 1024 * 1024:  # 20 Mb
        await message.reply("üíÄ <b>–û—à–∏–±–∫–∞:</b> –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /cropper")
        return

    file_id = (message.photo[-1] if message.photo else message.document).file_id
    file = await bot.get_file(file_id)
    img_data = BytesIO()
    await bot.download_file(file.file_path, destination=img_data)
    img_data.seek(0)

    pillow_heif.register_heif_opener()

    img = Image.open(img_data).convert("RGB")
    img = ImageOps.exif_transpose(img)

    if message.caption:
        caption += message.caption
    caption += ' ' + message.document.file_name
    caption = caption.strip()
    caption_need_crop_match = re.search(r"%", caption)
    caption_urgent = re.search(r"!", caption)
    caption_size_match = re.search(r"(\d+)[x—Ö–•–•*—á–ß/\\:*.](\d+)", caption)
    caption_number_match = re.search(r"\b(\d+[a-zA-Z–∞-—è–ê-–Ø]*)\b", caption)

    if caption_size_match:
        width_cm = int(caption_size_match.group(1))
        height_cm = int(caption_size_match.group(2))
    else:
        width_cm = ''
        height_cm = ''

    if caption_number_match:
        number = caption_number_match.group(1)
    else:
        number = ''

    if caption_urgent:
        number += ' !!'

    if any(word in caption.lower() for word in ['–±–∞–Ω–Ω–µ—Ä', '–±–∞–Ω–µ—Ä', '–±–∞–Ω']):
        material = '–ë–∞–Ω–Ω–µ—Ä'
    elif any(word in caption.lower() for word in ['–º—Ö', '–º–∞—Ç–æ–≤—ã–π', '–º–∞—Ç']):
        material = '–ú–∞—Ç–æ–≤—ã–π —Ö–æ–ª—Å—Ç'
    else:
        material = '–•–æ–ª—Å—Ç'

    if caption_need_crop_match or not width_cm or not height_cm:
        material_dict = {'–•–æ–ª—Å—Ç': 0, '–ë–∞–Ω–Ω–µ—Ä': 1, '–•–ª–æ–ø–æ–∫': 2, '–ú–∞—Ç–æ–≤—ã–π —Ö–æ–ª—Å—Ç': 3}
        Thread(target=sendy_cropper, kwargs={
            'image': img,
            'number': number,
            'material': material_dict[material],
            'width': width_cm,
            'height': height_cm,
            'message': message
        }).start()
    else:
        img_proc = PhotoProc()
        img_proc.add_image(img)
        img_proc.set_presets(number=number, width_cm=width_cm, height_cm=height_cm, material=material, message=message)
        img_proc.process_image()
