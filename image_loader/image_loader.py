import asyncio
import os
import logging

from watchfiles import awatch
from aiogram.types import FSInputFile, CallbackQuery
from aiogram import F, Router

from data import data
from config import config
from keyboards.keyboards import keyboard_inline_open_folder

logger = logging.getLogger(__name__)
image_loader_router = Router(name='image_loader_router')


async def image_loader():
    await asyncio.sleep(5)  # waiting for data to read
    try:
        async for _ in awatch(data.image_loader_path):
            await image_load_handler()
    except Exception as e:
        logger.exception(f"[image_loader] –û—à–∏–±–∫–∞: {e}")
        await config.bot.send_message(chat_id=config.chat_id, text=f"üíÄ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:</b> {e}"
                                                                   f"\n\n –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ /settings")


async def image_load_handler():
    file_path = '`–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω`'
    try:
        path = data.image_loader_path
        for file in os.listdir(path):
            if file != 'Uploaded' and (file.endswith('.jpg') or file.endswith('.png') or file.endswith('.heic')):
                file_path = os.path.join(path, file)
                await config.bot.send_document(chat_id=config.chat_id, document=FSInputFile(file_path))
                if 'Uploaded' in os.listdir(path):
                    os.replace(file_path, os.path.join(path, 'Uploaded', file))
                else:
                    os.mkdir(os.path.join(path, 'Uploaded'))
                    os.replace(file_path, os.path.join(path, 'Uploaded', file))
    except:
        try:
            await config.bot.send_message(chat_id=config.chat_id,
                                          text=f'üíÄ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.</b>'
                                               f'\n'
                                               f'\n–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:'
                                               f'\n<code>{file_path}</code>'
                                               f'\n'
                                               f'\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–∞ –æ—Ç—Å—É—Ç–≤–∏–µ –≤ –Ω–µ–π –ø–æ—Å—Ç–æ—Ä–æ–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–∞–ø–æ–∫.'
                                               f'\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ/—Å–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å /settings',
                                          reply_markup=keyboard_inline_open_folder)
            await asyncio.sleep(60)
        except:
            await config.bot.send_message(chat_id=config.chat_id,
                                          text=f'üíÄ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.</b>'
                                               f'\n'
                                               f'\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ/—Å–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å /settings',
                                          )
            await asyncio.sleep(60)


@image_loader_router.callback_query(F.data == 'button_open_folder')  # –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –Ω–∞–∂–∞—Ç–∞
async def button_open_folder(callback: CallbackQuery):
    os.system(f"explorer.exe {data.image_loader_path}")
    await callback.answer()


@image_loader_router.callback_query(F.data == 'button_yes_clean_folder')  # –∫–Ω–æ–ø–∫–∞ –î–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ uploaded –Ω–∞–∂–∞—Ç–∞
async def button_yes_clean_folder(callback: CallbackQuery):
    files_size = 0
    uploaded_path = os.path.join(data.image_loader_path, 'Uploaded')
    for file in os.listdir(uploaded_path):
        file_path = os.path.join(data.image_loader_path, 'Uploaded', file)
        files_size += os.path.getsize(file_path)
        os.remove(file_path)
    files_size_mb = files_size / (1024 * 1024)
    await callback.message.edit_text(text=f'‚úÖ –ü–∞–ø–∫–∞ Uploaded –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ [{files_size_mb:.2f} –ú–ë]',
                                     reply_markup=keyboard_inline_open_folder)
