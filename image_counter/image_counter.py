"""
Image counter
--------------------
This script is used to count, categorize, and send all the images that have already been processed by user.
It helps the user keep track of statistics.

It performs the following steps:
    1. The `counter_outer` function receives a folder path where all `.jpg` files should be counted.
       The function looks specifically for `.jpg` files containing the Cyrillic letter '—Ö' in their names.
       It also processes nested subfolders recursively.
    2. It then builds a `list_of_all_sizes`.
    3. Finally, all elements from this list are sent to the user‚Äôs chat via aiogram.

Usage:
    Set the folder path in Sendy settings and press the üßÆ button.
"""

from collections import Counter
import re
import os
import logging

from aiogram.types import Message

from data.data import data

logger = logging.getLogger(__name__)


async def count_images_in_folder(folder, message: Message):
    exceptions = data['Alex_exceptions']
    all_sizes_sorted = []

    def process_subfolder(subfolder):
        materials: dict[str, list[str]] = {'–•–û–õ–°–¢': [], '–ë–ê–ù–ù–ï–†': [], '–•–õ–û–ü–û–ö': [], '–ú–ê–¢–û–í–´–ô': []}

        # —Å—á–∏—Ç–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏ —Ö–æ–ª—Å—Ç/–±–∞–Ω–Ω–µ—Ä/—Ö–ª–æ–ø–æ–∫/–º–∞—Ç–æ–≤—ã–π
        for file in os.listdir(subfolder):
            file = file.upper()
            if file.endswith('.JPG') and '–•' in file:  # –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
                have_width_height = re.search(r"(\d+)–•(\d+)", file)
                if have_width_height:
                    width, height = have_width_height.groups()
                    width_height = f'{width}√ó{height}'
                    for material in materials:
                        if material in file:
                            materials[material].append(width_height)
                            break

            elif os.path.isdir(os.path.join(subfolder, file)) and (file not in exceptions):
                process_subfolder(os.path.join(subfolder, file))

        # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–ª–∏—á–Ω–∞ –æ—Ç –Ω—É–ª—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç counter –≤ —Å—Ç—Ä–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        def add_to_counter(name: str, counter: Counter[str]) -> str:
            list_of_sizes = ''
            if sum(counter.values()):
                list_of_sizes += f'\n<b>{name} {sum(counter.values())} —à—Ç.</b>\n'
                for key, value in counter.items():
                    list_of_sizes += f' {key} = {value} —à—Ç.\n'
            return list_of_sizes

        all_sizes = ''
        for material in materials:
            all_sizes += add_to_counter(material, Counter(materials[material]))

        # —Å—á–∏—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ –≤ –ø–∞–ø–∫–µ, –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
        num_of_files_in_folder = sum(len(i) for i in materials.values())
        current_folder = os.path.basename(subfolder)
        try:
            parent_folder = os.path.basename(os.path.dirname(subfolder))
            current_folder_sizes = f'üìÅ {parent_folder}\n ‚îî‚îÄ <b>{current_folder}: {num_of_files_in_folder} —à—Ç.</b>\n{all_sizes}'
        except IndexError:
            logger.exception(f'There is no parent folder {subfolder}')
            current_folder_sizes = f'üìÅ <b>{current_folder}\n: {num_of_files_in_folder} —à—Ç.</b>\n{all_sizes}'

        all_sizes_sorted.append(current_folder_sizes)  # —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–ø–∏—Å–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫

    for element in os.listdir(folder):
        folder_in = os.path.join(folder, element)
        if os.path.isdir(folder_in) and (element not in exceptions):  # folder_inner –ø–∞–ø–∫–∞ –∏ –Ω–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
            process_subfolder(folder_in)

    for msg in all_sizes_sorted[::-1]:  # –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        await message.answer(text=msg)
