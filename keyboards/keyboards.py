from aiogram.types import KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from lexicon import *
import uuid

# –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
kb_builder = ReplyKeyboardBuilder()
MainButtons = ['üßÆ', '‚úÇÔ∏è', 'üì∏', '‚öôÔ∏è']
for btn in MainButtons:
    kb_builder.add(KeyboardButton(text=btn))
kb_builder.adjust(4)
main_keyboard = kb_builder.as_markup(resize_keyboard=True)


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
def create_inline_kb(width: int,
                     *args: str,
                     last_btn: str | None = None,
                     **kwargs: str) -> InlineKeyboardMarkup:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder = InlineKeyboardBuilder()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons: list[InlineKeyboardButton] = []

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ args –∏ kwargs
    if args:
        for button in args:
            buttons.append(InlineKeyboardButton(
                text=LEXICON[button] if button in LEXICON else button,
                callback_data=button))
    if kwargs:
        for button, text in kwargs.items():
            buttons.append(InlineKeyboardButton(
                text=text,
                callback_data=button))

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=width)
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∏–ª–¥–µ—Ä –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    if last_btn:
        kb_builder.row(InlineKeyboardButton(
            text=last_btn,
            callback_data='button_no'
        ))

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()

keyboard_inline_clean_folder = create_inline_kb(2, **clean_folder)
keyboard_inline_shutdown = create_inline_kb(2, **shutdown)
keyboard_inline_open_folder = create_inline_kb(1, **open_folder)
keyboard_inline_startup_open_folder = create_inline_kb(1, **startup_folder)
keyboard_inline_settings_cancel = create_inline_kb(1, **cancel)



keyboard_inline_settings_main = create_inline_kb(1, **settings_main)

keyboard_inline_settings_photo_loader = create_inline_kb(1, **settings_photo_loader)
keyboard_inline_back_to_settings_photo_loader = create_inline_kb(1, **back_to_settings_photo_loader)

keyboard_inline_settings_photo_processing = create_inline_kb(2, **settings_photo_processing)
keyboard_inline_back_to_settings_photo_processing = create_inline_kb(1, **back_to_settings_photo_processing)

keyboard_inline_settings_print_counter = create_inline_kb(1, **settings_print_counter)
keyboard_inline_back_to_settings_print_counter = create_inline_kb(1, **back_to_settings_print_counter)

keyboard_inline_settings_other = create_inline_kb(1, **settings_other)
keyboard_inline_back_to_settings_other = create_inline_kb(1, **back_to_settings_other)
keyboard_inline_settings_other_startup = create_inline_kb(2, **startup_set)

keyboard_inline_update = create_inline_kb(1, **update)

photo_paths = {}

def keyboard_inline_open_photo(filepath):
    file_id = str(uuid.uuid4())[:8]  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    photo_paths[file_id] = filepath  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –ø–æ —ç—Ç–æ–º—É ID

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç", callback_data=f"open_photo:{file_id}"),
            InlineKeyboardButton(text="üìÇ", callback_data=f"open_photo_folder:{file_id}"),
            InlineKeyboardButton(text="üî•", callback_data=f"del_photo:{file_id}")
        ]
    ])
